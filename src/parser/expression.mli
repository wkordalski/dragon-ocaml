

type expression = [
| Node.identifier
| `Default
| `GetMemberOperator of (expression * Node.identifier)
| `PostfixIncreaseOperator of (expression)
| `PostfixDecreaseOperator of (expression)
| `PrefixIncreaseOperator of (expression)
| `PrefixDecreaseOperator of (expression)
| `PowerOperator of (expression * expression)
| `UnaryPlusOperator of (expression)
| `UnaryMinusOperator of (expression)
| `UnaryComplementOperator of (expression)
| `MultiplyOperator of (expression * expression)
| `DivideOperator of (expression * expression)
| `ModuloOperator of (expression * expression)
| `PlusOperator of (expression * expression)
| `MinusOperator of (expression * expression)
| `CatOperator of (expression * expression)
| `BitAndOperator of (expression * expression)
| `BitXorOperator of (expression * expression)
| `BitOrOperator of (expression * expression)
| `LeftShiftOperator of (expression * expression)
| `RightShiftOperator of (expression * expression)
| `LeftUnsignedShiftOperator of (expression * expression)
| `RightUnsignedShiftOperator of (expression * expression)
| `LessCompareOperator of (expression * expression)
| `GreaterCompareOperator of (expression * expression)
| `LessEqualCompareOperator of (expression * expression)
| `GreaterEqualCompareOperator of (expression * expression)
| `EqualOperator of (expression * expression)
| `NotEqualOperator of (expression * expression)
| `IdentityOperator of (expression * expression)
| `NotIdentityOperator of (expression * expression)
| `IsOperator of (expression * expression)
| `NotIsOperator of (expression * expression)
| `InOperator of (expression * expression)
| `NotInOperator of (expression * expression)
| `AndOperator of (expression * expression)
| `XorOperator of (expression * expression)
| `OrOperator of (expression * expression)
]

val parse_expression : Token.t list -> (expression * Token.t list)
val parse_simple_expression : Token.t list -> (expression * Token.t list)
